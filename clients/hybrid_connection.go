package main

import (
	"fmt"
	"strings"
	"sync"
	"time"
)

// Interface para escritores de conex√£o
type WebSocketWriter interface {
	WriteMessage(message string) error
}

var (
	connectionMutex sync.Mutex
)

func init() {
	// Mark functions as used to satisfy linter for U1000 errors,
	// assuming they are work-in-progress or conditionally used
	// in ways the linter might not fully detect in the current context.
	_ = isConnectionHealthy
	_ = disconnectFromRelay
	_ = disconnectFromLocal
}

// Gerenciador principal de conex√µes h√≠bridas
func startHybridConnectionManager() {
	fmt.Println("üîó Iniciando gerenciador de conex√µes h√≠bridas...")

	for {
		connectionMutex.Lock()
		isConnected := connected
		connectionMutex.Unlock()

		if !isConnected {
			// N√£o est√° conectado, tenta estabelecer conex√£o
			attemptHybridConnection()
		}

		// Verifica conex√£o a cada minuto
		time.Sleep(60 * time.Second)
	}
}

// Tenta conectar usando estrat√©gia h√≠brida
func attemptHybridConnection() {
	fmt.Println("üîÑ Tentando estabelecer conex√£o h√≠brida...")

	// Use configuration's connection mode
	switch appConfig.ConnectionMode {
	case "local":
		if tryLocalConnection() {
			return
		}
		fmt.Println("‚ö†Ô∏è Conex√£o local falhou, deseja tentar configura√ß√£o de relay?")
		var tryRelay string
		fmt.Print("Tentar relay? (s/n): ")
		fmt.Scanln(&tryRelay)

		if strings.ToLower(tryRelay) == "s" || strings.ToLower(tryRelay) == "sim" {
			// Force configuration prompt
			forceConfigPrompt = true
			PromptForConfiguration()
			tryPublicConnection()
		}

	case "public":
		// Make sure configuration is loaded first
		if appConfig.FirstRun {
			PromptForConfiguration()
		}

		if tryPublicConnection() {
			return
		}
		fmt.Println("‚ö†Ô∏è Conex√£o p√∫blica falhou, tentando local como backup...")
		tryLocalConnection()

	default: // "auto"
		// Try local first (faster and more secure)
		if tryLocalConnection() {
			return
		}

		// If local fails, prompt for API configuration
		fmt.Println("‚ö†Ô∏è Conex√£o local falhou, configurando conex√£o p√∫blica...")
		// Force configuration prompt
		forceConfigPrompt = true
		PromptForConfiguration()

		// Try public connection with new settings
		if tryPublicConnection() {
			return
		}

		fmt.Println("‚ùå Todas as tentativas de conex√£o falharam")
	}
}

// Tenta conex√£o P2P local
func tryLocalConnection() bool {
	if host == nil {
		fmt.Println("‚ö†Ô∏è Host P2P n√£o inicializado")
		return false
	}

	fmt.Println("üè† Tentando conex√£o P2P local...")
	success := connectWithRetry()

	if success {
		setConnectionStatus(LOCAL_P2P)
		fmt.Println("‚úÖ Conectado via P2P local")
		return true
	}

	return false
}

// Tenta conex√£o via relay p√∫blico
func tryPublicConnection() bool {
	fmt.Println("üåê Tentando conex√£o via relay p√∫blico...")
	success := connectViaRelay()

	if success {
		setConnectionStatus(PUBLIC_RELAY)
		fmt.Println("‚úÖ Conectado via relay p√∫blico")
		return true
	}

	return false
}

// Monitora qualidade da conex√£o e troca se necess√°rio
func monitorConnectionQuality() {
	for {
		time.Sleep(5 * time.Minute)

		// Use GetConnectionStatus() instead of direct access
		currentConn := GetConnectionStatus()

		if currentConn == DISCONNECTED {
			continue
		}

		// Se est√° em conex√£o p√∫blica mas local ficou dispon√≠vel, troca
		if currentConn == PUBLIC_RELAY && isLocalNetworkAvailable() {
			fmt.Println("üîÑ Rede local dispon√≠vel, migrando de p√∫blico para local...")

			// Tenta conex√£o local
			if tryLocalConnection() {
				// Desconecta do relay p√∫blico
				disconnectFromRelay()
			}
		}

		// Se est√° em local mas a qualidade est√° ruim, considera p√∫blico
		if currentConn == LOCAL_P2P && !isConnectionHealthy() {
			fmt.Println("üîÑ Conex√£o local inst√°vel, considerando migra√ß√£o para p√∫blico...")

			if isPublicNetworkAvailable() {
				if tryPublicConnection() {
					// Desconecta do P2P local
					disconnectFromLocal()
				}
			}
		}
	}
}

// Verifica se a conex√£o atual est√° saud√°vel
func isConnectionHealthy() bool {
	// Implementa verifica√ß√£o de sa√∫de da conex√£o
	// Por exemplo: ping, lat√™ncia, perda de pacotes
	return true // Simplificado por enquanto
}

// Desconecta do relay p√∫blico
func disconnectFromRelay() {
	fmt.Println("üì¥ Desconectando do relay p√∫blico...")
	// Implementar desconex√£o do WebSocket
}

// Desconecta do P2P local
func disconnectFromLocal() {
	fmt.Println("üì¥ Desconectando do P2P local...")
	// Implementar desconex√£o do libp2p
}

// For√ßa troca de modo de conex√£o
func switchConnectionMode(newMode string) {
	connectionMutex.Lock()
	connectionMode = newMode
	connected = false
	currentConnection = DISCONNECTED
	connectionMutex.Unlock()

	fmt.Printf("üîÑ Modo de conex√£o alterado para: %s\n", newMode)

	// For√ßa nova tentativa de conex√£o
	go attemptHybridConnection()
}
